// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "final-project-backend/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// IUserTokenRepository is an autogenerated mock type for the IUserTokenRepository type
type IUserTokenRepository struct {
	mock.Mock
}

// GetByUserID provides a mock function with given fields: userID
func (_m *IUserTokenRepository) GetByUserID(userID int64) (*models.UserToken, error) {
	ret := _m.Called(userID)

	var r0 *models.UserToken
	if rf, ok := ret.Get(0).(func(int64) *models.UserToken); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: userToken
func (_m *IUserTokenRepository) Insert(userToken *models.UserToken) (*models.UserToken, error) {
	ret := _m.Called(userToken)

	var r0 *models.UserToken
	if rf, ok := ret.Get(0).(func(*models.UserToken) *models.UserToken); ok {
		r0 = rf(userToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.UserToken) error); ok {
		r1 = rf(userToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token
func (_m *IUserTokenRepository) Update(token *models.UserToken) (*models.UserToken, int, error) {
	ret := _m.Called(token)

	var r0 *models.UserToken
	if rf, ok := ret.Get(0).(func(*models.UserToken) *models.UserToken); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserToken)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*models.UserToken) int); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*models.UserToken) error); ok {
		r2 = rf(token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIUserTokenRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserTokenRepository creates a new instance of IUserTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserTokenRepository(t mockConstructorTestingTNewIUserTokenRepository) *IUserTokenRepository {
	mock := &IUserTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
