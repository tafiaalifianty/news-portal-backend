// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dtos "final-project-backend/internal/dtos"

	mock "github.com/stretchr/testify/mock"

	models "final-project-backend/internal/models"
)

// IPostRepository is an autogenerated mock type for the IPostRepository type
type IPostRepository struct {
	mock.Mock
}

// CountByQuery provides a mock function with given fields: query
func (_m *IPostRepository) CountByQuery(query *dtos.PostsRequestQuery) (int64, error) {
	ret := _m.Called(query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*dtos.PostsRequestQuery) int64); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dtos.PostsRequestQuery) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *IPostRepository) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: query
func (_m *IPostRepository) GetAll(query *dtos.PostsRequestQuery) ([]*models.Post, error) {
	ret := _m.Called(query)

	var r0 []*models.Post
	if rf, ok := ret.Get(0).(func(*dtos.PostsRequestQuery) []*models.Post); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dtos.PostsRequestQuery) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *IPostRepository) GetByID(id int64) (*models.Post, error) {
	ret := _m.Called(id)

	var r0 *models.Post
	if rf, ok := ret.Get(0).(func(int64) *models.Post); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategories provides a mock function with given fields:
func (_m *IPostRepository) GetCategories() ([]*models.Category, error) {
	ret := _m.Called()

	var r0 []*models.Category
	if rf, ok := ret.Get(0).(func() []*models.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopLikedAndSharedPost provides a mock function with given fields: structConditions
func (_m *IPostRepository) GetTopLikedAndSharedPost(structConditions *models.Post) ([]*models.Post, error) {
	ret := _m.Called(structConditions)

	var r0 []*models.Post
	if rf, ok := ret.Get(0).(func(*models.Post) []*models.Post); ok {
		r0 = rf(structConditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Post) error); ok {
		r1 = rf(structConditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTypes provides a mock function with given fields:
func (_m *IPostRepository) GetTypes() ([]*models.PostType, error) {
	ret := _m.Called()

	var r0 []*models.PostType
	if rf, ok := ret.Get(0).(func() []*models.PostType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PostType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: post
func (_m *IPostRepository) Insert(post *models.Post) (*models.Post, error) {
	ret := _m.Called(post)

	var r0 *models.Post
	if rf, ok := ret.Get(0).(func(*models.Post) *models.Post); ok {
		r0 = rf(post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Post) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: post
func (_m *IPostRepository) Update(post *models.Post) (*models.Post, int, error) {
	ret := _m.Called(post)

	var r0 *models.Post
	if rf, ok := ret.Get(0).(func(*models.Post) *models.Post); ok {
		r0 = rf(post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*models.Post) int); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*models.Post) error); ok {
		r2 = rf(post)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateSingleColumn provides a mock function with given fields: key, post
func (_m *IPostRepository) UpdateSingleColumn(key string, post *models.Post) (*models.Post, int, error) {
	ret := _m.Called(key, post)

	var r0 *models.Post
	if rf, ok := ret.Get(0).(func(string, *models.Post) *models.Post); ok {
		r0 = rf(key, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, *models.Post) int); ok {
		r1 = rf(key, post)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, *models.Post) error); ok {
		r2 = rf(key, post)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIPostRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPostRepository creates a new instance of IPostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPostRepository(t mockConstructorTestingTNewIPostRepository) *IPostRepository {
	mock := &IPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
