// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "final-project-backend/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// IGiftRepository is an autogenerated mock type for the IGiftRepository type
type IGiftRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *IGiftRepository) GetAll() ([]*models.Gift, error) {
	ret := _m.Called()

	var r0 []*models.Gift
	if rf, ok := ret.Get(0).(func() []*models.Gift); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Gift)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUserGifts provides a mock function with given fields:
func (_m *IGiftRepository) GetAllUserGifts() ([]*models.UserGift, error) {
	ret := _m.Called()

	var r0 []*models.UserGift
	if rf, ok := ret.Get(0).(func() []*models.UserGift); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserGift)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGift provides a mock function with given fields: userGift
func (_m *IGiftRepository) GetUserGift(userGift *models.UserGift) (*models.UserGift, error) {
	ret := _m.Called(userGift)

	var r0 *models.UserGift
	if rf, ok := ret.Get(0).(func(*models.UserGift) *models.UserGift); ok {
		r0 = rf(userGift)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserGift)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.UserGift) error); ok {
		r1 = rf(userGift)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGiftsByUserID provides a mock function with given fields: userID
func (_m *IGiftRepository) GetUserGiftsByUserID(userID int64) ([]*models.UserGift, error) {
	ret := _m.Called(userID)

	var r0 []*models.UserGift
	if rf, ok := ret.Get(0).(func(int64) []*models.UserGift); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserGift)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStock provides a mock function with given fields: gift
func (_m *IGiftRepository) UpdateStock(gift *models.Gift) (*models.Gift, int, error) {
	ret := _m.Called(gift)

	var r0 *models.Gift
	if rf, ok := ret.Get(0).(func(*models.Gift) *models.Gift); ok {
		r0 = rf(gift)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Gift)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*models.Gift) int); ok {
		r1 = rf(gift)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*models.Gift) error); ok {
		r2 = rf(gift)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUserGift provides a mock function with given fields: userGift
func (_m *IGiftRepository) UpdateUserGift(userGift *models.UserGift) (*models.UserGift, int, error) {
	ret := _m.Called(userGift)

	var r0 *models.UserGift
	if rf, ok := ret.Get(0).(func(*models.UserGift) *models.UserGift); ok {
		r0 = rf(userGift)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserGift)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*models.UserGift) int); ok {
		r1 = rf(userGift)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*models.UserGift) error); ok {
		r2 = rf(userGift)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIGiftRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIGiftRepository creates a new instance of IGiftRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIGiftRepository(t mockConstructorTestingTNewIGiftRepository) *IGiftRepository {
	mock := &IGiftRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
