// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "final-project-backend/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// IGiftService is an autogenerated mock type for the IGiftService type
type IGiftService struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *IGiftService) GetAll() ([]*models.Gift, error) {
	ret := _m.Called()

	var r0 []*models.Gift
	if rf, ok := ret.Get(0).(func() []*models.Gift); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Gift)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUserGifts provides a mock function with given fields:
func (_m *IGiftService) GetAllUserGifts() ([]*models.UserGift, error) {
	ret := _m.Called()

	var r0 []*models.UserGift
	if rf, ok := ret.Get(0).(func() []*models.UserGift); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserGift)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGiftsByID provides a mock function with given fields: userID
func (_m *IGiftService) GetUserGiftsByID(userID int64) ([]*models.UserGift, error) {
	ret := _m.Called(userID)

	var r0 []*models.UserGift
	if rf, ok := ret.Get(0).(func(int64) []*models.UserGift); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserGift)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGiftStock provides a mock function with given fields: giftID, newStock
func (_m *IGiftService) UpdateGiftStock(giftID int64, newStock int) (*models.Gift, error) {
	ret := _m.Called(giftID, newStock)

	var r0 *models.Gift
	if rf, ok := ret.Get(0).(func(int64, int) *models.Gift); ok {
		r0 = rf(giftID, newStock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Gift)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(giftID, newStock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserGiftStatus provides a mock function with given fields: _a0
func (_m *IGiftService) UpdateUserGiftStatus(_a0 *models.UserGift) (*models.UserGift, error) {
	ret := _m.Called(_a0)

	var r0 *models.UserGift
	if rf, ok := ret.Get(0).(func(*models.UserGift) *models.UserGift); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserGift)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.UserGift) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIGiftService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIGiftService creates a new instance of IGiftService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIGiftService(t mockConstructorTestingTNewIGiftService) *IGiftService {
	mock := &IGiftService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
