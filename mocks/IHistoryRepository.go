// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "final-project-backend/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// IHistoryRepository is an autogenerated mock type for the IHistoryRepository type
type IHistoryRepository struct {
	mock.Mock
}

// GetByUserAndPostID provides a mock function with given fields: userID, postID
func (_m *IHistoryRepository) GetByUserAndPostID(userID int64, postID int64) (*models.History, error) {
	ret := _m.Called(userID, postID)

	var r0 *models.History
	if rf, ok := ret.Get(0).(func(int64, int64) *models.History); ok {
		r0 = rf(userID, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.History)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID
func (_m *IHistoryRepository) GetByUserID(userID int64) ([]*models.History, error) {
	ret := _m.Called(userID)

	var r0 []*models.History
	if rf, ok := ret.Get(0).(func(int64) []*models.History); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.History)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoriesReadCountPastMonth provides a mock function with given fields: structConditions
func (_m *IHistoryRepository) GetCategoriesReadCountPastMonth(structConditions *models.History) ([]*models.PostCategoryReadCount, error) {
	ret := _m.Called(structConditions)

	var r0 []*models.PostCategoryReadCount
	if rf, ok := ret.Get(0).(func(*models.History) []*models.PostCategoryReadCount); ok {
		r0 = rf(structConditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PostCategoryReadCount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.History) error); ok {
		r1 = rf(structConditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoriesReadCountPastWeek provides a mock function with given fields: structConditions
func (_m *IHistoryRepository) GetCategoriesReadCountPastWeek(structConditions *models.History) ([]*models.PostCategoryReadCount, error) {
	ret := _m.Called(structConditions)

	var r0 []*models.PostCategoryReadCount
	if rf, ok := ret.Get(0).(func(*models.History) []*models.PostCategoryReadCount); ok {
		r0 = rf(structConditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PostCategoryReadCount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.History) error); ok {
		r1 = rf(structConditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrendingPostsByCategory provides a mock function with given fields: categoryID
func (_m *IHistoryRepository) GetTrendingPostsByCategory(categoryID int64) ([]*models.Post, error) {
	ret := _m.Called(categoryID)

	var r0 []*models.Post
	if rf, ok := ret.Get(0).(func(int64) []*models.Post); ok {
		r0 = rf(categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: history
func (_m *IHistoryRepository) Insert(history *models.History) (*models.History, error) {
	ret := _m.Called(history)

	var r0 *models.History
	if rf, ok := ret.Get(0).(func(*models.History) *models.History); ok {
		r0 = rf(history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.History)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.History) error); ok {
		r1 = rf(history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: history
func (_m *IHistoryRepository) Update(history *models.History) (*models.History, int, error) {
	ret := _m.Called(history)

	var r0 *models.History
	if rf, ok := ret.Get(0).(func(*models.History) *models.History); ok {
		r0 = rf(history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.History)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*models.History) int); ok {
		r1 = rf(history)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*models.History) error); ok {
		r2 = rf(history)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateSingleColumn provides a mock function with given fields: key, history
func (_m *IHistoryRepository) UpdateSingleColumn(key string, history *models.History) (*models.History, int, error) {
	ret := _m.Called(key, history)

	var r0 *models.History
	if rf, ok := ret.Get(0).(func(string, *models.History) *models.History); ok {
		r0 = rf(key, history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.History)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, *models.History) int); ok {
		r1 = rf(key, history)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, *models.History) error); ok {
		r2 = rf(key, history)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIHistoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIHistoryRepository creates a new instance of IHistoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIHistoryRepository(t mockConstructorTestingTNewIHistoryRepository) *IHistoryRepository {
	mock := &IHistoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
