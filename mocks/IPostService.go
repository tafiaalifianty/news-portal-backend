// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dtos "final-project-backend/internal/dtos"

	mock "github.com/stretchr/testify/mock"

	models "final-project-backend/internal/models"
)

// IPostService is an autogenerated mock type for the IPostService type
type IPostService struct {
	mock.Mock
}

// CountByQuery provides a mock function with given fields: query
func (_m *IPostService) CountByQuery(query *dtos.PostsRequestQuery) (int64, int64, error) {
	ret := _m.Called(query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*dtos.PostsRequestQuery) int64); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*dtos.PostsRequestQuery) int64); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*dtos.PostsRequestQuery) error); ok {
		r2 = rf(query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Create provides a mock function with given fields: post
func (_m *IPostService) Create(post *models.Post) (*models.Post, error) {
	ret := _m.Called(post)

	var r0 *models.Post
	if rf, ok := ret.Get(0).(func(*models.Post) *models.Post); ok {
		r0 = rf(post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Post) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *IPostService) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: query
func (_m *IPostService) GetAll(query *dtos.PostsRequestQuery) ([]*models.Post, error) {
	ret := _m.Called(query)

	var r0 []*models.Post
	if rf, ok := ret.Get(0).(func(*dtos.PostsRequestQuery) []*models.Post); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dtos.PostsRequestQuery) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *IPostService) GetByID(id int64) (*models.Post, error) {
	ret := _m.Called(id)

	var r0 *models.Post
	if rf, ok := ret.Get(0).(func(int64) *models.Post); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategories provides a mock function with given fields:
func (_m *IPostService) GetCategories() ([]*models.Category, error) {
	ret := _m.Called()

	var r0 []*models.Category
	if rf, ok := ret.Get(0).(func() []*models.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendedPosts provides a mock function with given fields: userID
func (_m *IPostService) GetRecommendedPosts(userID int64) ([]*models.Post, error) {
	ret := _m.Called(userID)

	var r0 []*models.Post
	if rf, ok := ret.Get(0).(func(int64) []*models.Post); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrendingPosts provides a mock function with given fields: userID
func (_m *IPostService) GetTrendingPosts(userID int64) ([]*models.Post, error) {
	ret := _m.Called(userID)

	var r0 []*models.Post
	if rf, ok := ret.Get(0).(func(int64) []*models.Post); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTypes provides a mock function with given fields:
func (_m *IPostService) GetTypes() ([]*models.PostType, error) {
	ret := _m.Called()

	var r0 []*models.PostType
	if rf, ok := ret.Get(0).(func() []*models.PostType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PostType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Like provides a mock function with given fields: postID, userID, isLike
func (_m *IPostService) Like(postID int64, userID int64, isLike bool) (*models.Post, *models.History, error) {
	ret := _m.Called(postID, userID, isLike)

	var r0 *models.Post
	if rf, ok := ret.Get(0).(func(int64, int64, bool) *models.Post); ok {
		r0 = rf(postID, userID, isLike)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	var r1 *models.History
	if rf, ok := ret.Get(1).(func(int64, int64, bool) *models.History); ok {
		r1 = rf(postID, userID, isLike)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.History)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int64, int64, bool) error); ok {
		r2 = rf(postID, userID, isLike)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Share provides a mock function with given fields: postID, userID
func (_m *IPostService) Share(postID int64, userID int64) (*models.Post, *models.History, error) {
	ret := _m.Called(postID, userID)

	var r0 *models.Post
	if rf, ok := ret.Get(0).(func(int64, int64) *models.Post); ok {
		r0 = rf(postID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	var r1 *models.History
	if rf, ok := ret.Get(1).(func(int64, int64) *models.History); ok {
		r1 = rf(postID, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.History)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int64, int64) error); ok {
		r2 = rf(postID, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIPostService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPostService creates a new instance of IPostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPostService(t mockConstructorTestingTNewIPostService) *IPostService {
	mock := &IPostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
