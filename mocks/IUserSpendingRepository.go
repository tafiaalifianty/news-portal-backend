// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "final-project-backend/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// IUserSpendingRepository is an autogenerated mock type for the IUserSpendingRepository type
type IUserSpendingRepository struct {
	mock.Mock
}

// GetByPrimaryKeys provides a mock function with given fields: userID, month, year
func (_m *IUserSpendingRepository) GetByPrimaryKeys(userID int64, month int, year int) (*models.UserSpending, error) {
	ret := _m.Called(userID, month, year)

	var r0 *models.UserSpending
	if rf, ok := ret.Get(0).(func(int64, int, int) *models.UserSpending); ok {
		r0 = rf(userID, month, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSpending)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int, int) error); ok {
		r1 = rf(userID, month, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: userSpending
func (_m *IUserSpendingRepository) Insert(userSpending *models.UserSpending) (*models.UserSpending, error) {
	ret := _m.Called(userSpending)

	var r0 *models.UserSpending
	if rf, ok := ret.Get(0).(func(*models.UserSpending) *models.UserSpending); ok {
		r0 = rf(userSpending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSpending)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.UserSpending) error); ok {
		r1 = rf(userSpending)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userSpending
func (_m *IUserSpendingRepository) Update(userSpending *models.UserSpending) (*models.UserSpending, int, error) {
	ret := _m.Called(userSpending)

	var r0 *models.UserSpending
	if rf, ok := ret.Get(0).(func(*models.UserSpending) *models.UserSpending); ok {
		r0 = rf(userSpending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSpending)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*models.UserSpending) int); ok {
		r1 = rf(userSpending)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*models.UserSpending) error); ok {
		r2 = rf(userSpending)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIUserSpendingRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserSpendingRepository creates a new instance of IUserSpendingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserSpendingRepository(t mockConstructorTestingTNewIUserSpendingRepository) *IUserSpendingRepository {
	mock := &IUserSpendingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
