// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "final-project-backend/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// IInvoiceRepository is an autogenerated mock type for the IInvoiceRepository type
type IInvoiceRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: _a0
func (_m *IInvoiceRepository) GetAll(_a0 *models.Invoice) ([]*models.Invoice, error) {
	ret := _m.Called(_a0)

	var r0 []*models.Invoice
	if rf, ok := ret.Get(0).(func(*models.Invoice) []*models.Invoice); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Invoice) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCurrentMonth provides a mock function with given fields: invoice
func (_m *IInvoiceRepository) GetAllCurrentMonth(invoice *models.Invoice) ([]*models.Invoice, error) {
	ret := _m.Called(invoice)

	var r0 []*models.Invoice
	if rf, ok := ret.Get(0).(func(*models.Invoice) []*models.Invoice); ok {
		r0 = rf(invoice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Invoice) error); ok {
		r1 = rf(invoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCode provides a mock function with given fields: code
func (_m *IInvoiceRepository) GetByCode(code string) (*models.Invoice, error) {
	ret := _m.Called(code)

	var r0 *models.Invoice
	if rf, ok := ret.Get(0).(func(string) *models.Invoice); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *IInvoiceRepository) GetByID(id int64) (*models.Invoice, error) {
	ret := _m.Called(id)

	var r0 *models.Invoice
	if rf, ok := ret.Get(0).(func(int64) *models.Invoice); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: invoice
func (_m *IInvoiceRepository) Insert(invoice *models.Invoice) (*models.Invoice, error) {
	ret := _m.Called(invoice)

	var r0 *models.Invoice
	if rf, ok := ret.Get(0).(func(*models.Invoice) *models.Invoice); ok {
		r0 = rf(invoice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Invoice) error); ok {
		r1 = rf(invoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: invoice
func (_m *IInvoiceRepository) Update(invoice *models.Invoice) (*models.Invoice, int, error) {
	ret := _m.Called(invoice)

	var r0 *models.Invoice
	if rf, ok := ret.Get(0).(func(*models.Invoice) *models.Invoice); ok {
		r0 = rf(invoice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Invoice)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*models.Invoice) int); ok {
		r1 = rf(invoice)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*models.Invoice) error); ok {
		r2 = rf(invoice)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIInvoiceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIInvoiceRepository creates a new instance of IInvoiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIInvoiceRepository(t mockConstructorTestingTNewIInvoiceRepository) *IInvoiceRepository {
	mock := &IInvoiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
