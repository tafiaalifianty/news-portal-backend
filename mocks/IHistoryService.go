// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "final-project-backend/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// IHistoryService is an autogenerated mock type for the IHistoryService type
type IHistoryService struct {
	mock.Mock
}

// GetByUserAndPostID provides a mock function with given fields: userID, postID
func (_m *IHistoryService) GetByUserAndPostID(userID int64, postID int64) (*models.History, error) {
	ret := _m.Called(userID, postID)

	var r0 *models.History
	if rf, ok := ret.Get(0).(func(int64, int64) *models.History); ok {
		r0 = rf(userID, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.History)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID
func (_m *IHistoryService) GetByUserID(userID int64) ([]*models.History, error) {
	ret := _m.Called(userID)

	var r0 []*models.History
	if rf, ok := ret.Get(0).(func(int64) []*models.History); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.History)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrInsert provides a mock function with given fields: history
func (_m *IHistoryService) UpdateOrInsert(history *models.History) (*models.History, error) {
	ret := _m.Called(history)

	var r0 *models.History
	if rf, ok := ret.Get(0).(func(*models.History) *models.History); ok {
		r0 = rf(history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.History)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.History) error); ok {
		r1 = rf(history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIHistoryService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIHistoryService creates a new instance of IHistoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIHistoryService(t mockConstructorTestingTNewIHistoryService) *IHistoryService {
	mock := &IHistoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
